// <auto-generated />
using System;
using MAhface.Infrastructure.EfCore.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MAhface.Infrastructure.EfCore.Migrations
{
    [DbContext(typeof(AllamehPrroject))]
    [Migration("20250117200839_Last")]
    partial class Last
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CoursesStudent", b =>
                {
                    b.Property<Guid>("CoursesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CoursesId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("CoursesStudent");
                });

            modelBuilder.Entity("MAhface.Domain.Core.Entities.BasicInfo.Accounting.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Student", "BasicInfo");
                });

            modelBuilder.Entity("MAhface.Domain.Core.Entities.BasicInfo.Accounting.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Teacher", "BasicInfo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f262031-5db7-47ae-893d-08dd0d86a8be"),
                            Code = 1,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(9283),
                            CreatedUserID = new Guid("9fbd6689-684d-42c6-918c-877eb16f77ff"),
                            ISActive = true,
                            IsDeleted = false,
                            UserId = new Guid("bd53a164-26df-45ab-bf5c-08dd0d797a44")
                        },
                        new
                        {
                            Id = new Guid("2603e63f-9b46-4807-72be-08dd0d8f6f8f"),
                            Code = 2,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(9291),
                            CreatedUserID = new Guid("1b0a8077-ca24-4994-a4f8-5cfe8f790e1d"),
                            ISActive = true,
                            IsDeleted = false,
                            UserId = new Guid("9ceea18b-7117-4059-805c-08dd0d8a09bd")
                        },
                        new
                        {
                            Id = new Guid("55a3337f-cfa5-4440-242a-08dd2592d1dd"),
                            Code = 3,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(9296),
                            CreatedUserID = new Guid("10080fb1-72a2-4ec2-93f3-25d32d9f0e6c"),
                            ISActive = true,
                            IsDeleted = false,
                            UserId = new Guid("05c5b88d-af8c-407e-d068-08dd15005342")
                        },
                        new
                        {
                            Id = new Guid("0c7938f9-e881-42fa-242b-08dd2592d1dd"),
                            Code = 4,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(9300),
                            CreatedUserID = new Guid("f090514a-11bd-409c-899e-ad0570a96a0d"),
                            ISActive = true,
                            IsDeleted = false,
                            UserId = new Guid("05c5b88d-af8c-407e-d068-08dd15005342")
                        },
                        new
                        {
                            Id = new Guid("3a4086aa-1278-4325-242c-08dd2592d1dd"),
                            Code = 5,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(9304),
                            CreatedUserID = new Guid("d7d45db1-9e4a-4398-a45e-69a4194debae"),
                            ISActive = true,
                            IsDeleted = false,
                            UserId = new Guid("05c5b88d-af8c-407e-d068-08dd15005342")
                        },
                        new
                        {
                            Id = new Guid("ecf68ade-4b48-4307-242d-08dd2592d1dd"),
                            Code = 6,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(9310),
                            CreatedUserID = new Guid("f51c68d2-a302-4d96-801b-dda5352596ca"),
                            ISActive = true,
                            IsDeleted = false,
                            UserId = new Guid("05c5b88d-af8c-407e-d068-08dd15005342")
                        },
                        new
                        {
                            Id = new Guid("486c341e-03d9-4616-242e-08dd2592d1dd"),
                            Code = 7,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(9314),
                            CreatedUserID = new Guid("3940def0-2d01-45af-a54e-448937e5166e"),
                            ISActive = true,
                            IsDeleted = false,
                            UserId = new Guid("05c5b88d-af8c-407e-d068-08dd15005342")
                        });
                });

            modelBuilder.Entity("MAhface.Domain.Core.Entities.BasicInfo.Accounting.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStudent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsSystemAccount")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTeacher")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ProfileImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("bd53a164-26df-45ab-bf5c-08dd0d797a44"),
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2002, 11, 25, 17, 47, 55, 494, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "76b1da8d-1986-4020-840f-bbba1a97a295",
                            Email = "AshkanTeacher@gmail.com",
                            EmailConfirmed = false,
                            Firstname = "Ashkan",
                            IsActived = false,
                            IsDeleted = false,
                            IsStudent = false,
                            IsSystemAccount = false,
                            IsSystemAdmin = false,
                            IsTeacher = true,
                            LastName = "Teacher",
                            LockoutEnabled = false,
                            NationalCode = "1234567890",
                            PhoneNumber = "09123655654",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("9ceea18b-7117-4059-805c-08dd0d8a09bd"),
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2024, 11, 25, 19, 32, 45, 25, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "76b1da8d-1986-4020-840f-bbba1a97a295",
                            Email = "jadi@gmail.com",
                            EmailConfirmed = false,
                            Firstname = "جادی",
                            IsActived = false,
                            IsDeleted = false,
                            IsStudent = false,
                            IsSystemAccount = false,
                            IsSystemAdmin = false,
                            IsTeacher = true,
                            LastName = "میر میرانی",
                            LockoutEnabled = false,
                            NationalCode = "1234567891",
                            PhoneNumber = "09121236547",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("d5c19e8c-d8da-421c-a82c-08dd12f8ba89"),
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2002, 11, 2, 17, 41, 12, 121, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "76b1da8d-1986-4020-840f-bbba1a97a295",
                            Email = "vahidJF@gmail.com",
                            EmailConfirmed = false,
                            Firstname = "وحید",
                            IsActived = false,
                            IsDeleted = false,
                            IsStudent = false,
                            IsSystemAccount = false,
                            IsSystemAdmin = false,
                            IsTeacher = true,
                            LastName = "2جعفری",
                            LockoutEnabled = false,
                            NationalCode = "",
                            PhoneNumber = "09129129120",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("05c5b88d-af8c-407e-d068-08dd15005342"),
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2024, 12, 5, 7, 42, 7, 242, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "76b1da8d-1986-4020-840f-bbba1a97a295",
                            Email = "string",
                            EmailConfirmed = false,
                            Firstname = "string",
                            IsActived = false,
                            IsDeleted = false,
                            IsStudent = false,
                            IsSystemAccount = false,
                            IsSystemAdmin = false,
                            IsTeacher = true,
                            LastName = "string",
                            LockoutEnabled = false,
                            NationalCode = "string",
                            PhoneNumber = "string",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("e2caf058-47c5-4c10-3fc6-08dd1604c009"),
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2024, 12, 6, 14, 45, 29, 103, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "76b1da8d-1986-4020-840f-bbba1a97a295",
                            Email = "sobhandanger81@gmail.com",
                            EmailConfirmed = false,
                            Firstname = "sopo",
                            IsActived = false,
                            IsDeleted = false,
                            IsStudent = true,
                            IsSystemAccount = false,
                            IsSystemAdmin = false,
                            IsTeacher = false,
                            LastName = "saffari",
                            LockoutEnabled = false,
                            NationalCode = "002510174",
                            PhoneNumber = "09917358742",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("81e27342-10ef-4faf-74ca-08dd1ad120c3"),
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2004, 12, 12, 17, 22, 1, 253, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "76b1da8d-1986-4020-840f-bbba1a97a295",
                            Email = "u@gmail.com",
                            EmailConfirmed = false,
                            Firstname = "sobhan",
                            IsActived = false,
                            IsDeleted = false,
                            IsStudent = false,
                            IsSystemAccount = false,
                            IsSystemAdmin = false,
                            IsTeacher = true,
                            LastName = "saffari",
                            LockoutEnabled = false,
                            NationalCode = "0005654789",
                            PhoneNumber = "09121940087",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("282a7f03-1dca-4d15-b706-08dd20626fc4"),
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2024, 12, 19, 19, 21, 28, 118, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "76b1da8d-1986-4020-840f-bbba1a97a295",
                            Email = "razaviash21@gmail.com",
                            EmailConfirmed = false,
                            Firstname = "test email",
                            IsActived = false,
                            IsDeleted = false,
                            IsStudent = true,
                            IsSystemAccount = false,
                            IsSystemAdmin = false,
                            IsTeacher = false,
                            LastName = "ashkan",
                            LockoutEnabled = false,
                            NationalCode = "1215",
                            PhoneNumber = "0915215",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("9f5dac63-d870-4424-7166-08dd2064841e"),
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2024, 12, 19, 19, 36, 36, 471, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "76b1da8d-1986-4020-840f-bbba1a97a295",
                            Email = "string@",
                            EmailConfirmed = false,
                            Firstname = "5651",
                            IsActived = false,
                            IsDeleted = false,
                            IsStudent = true,
                            IsSystemAccount = false,
                            IsSystemAdmin = false,
                            IsTeacher = false,
                            LastName = "hfyhb55",
                            LockoutEnabled = false,
                            NationalCode = "366551",
                            PhoneNumber = "21521",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("b373c277-e096-465f-a7e2-08dd33ff4451"),
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2000, 1, 18, 18, 21, 33, 105, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "76b1da8d-1986-4020-840f-bbba1a97a295",
                            Email = "abolfazlVafaDost@gmail.com",
                            EmailConfirmed = false,
                            Firstname = "ابوالفضل",
                            IsActived = false,
                            IsDeleted = false,
                            IsStudent = true,
                            IsSystemAccount = false,
                            IsSystemAdmin = false,
                            IsTeacher = false,
                            LastName = " وفادوست",
                            LockoutEnabled = false,
                            NationalCode = "1234567891",
                            PhoneNumber = "09121234123",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("c13acae2-6d50-47cf-f711-08dd347f841d"),
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2025, 1, 14, 9, 39, 55, 273, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "76b1da8d-1986-4020-840f-bbba1a97a295",
                            Email = "s",
                            EmailConfirmed = false,
                            Firstname = "s",
                            IsActived = false,
                            IsDeleted = false,
                            IsStudent = true,
                            IsSystemAccount = false,
                            IsSystemAdmin = false,
                            IsTeacher = false,
                            LastName = "2",
                            LockoutEnabled = false,
                            NationalCode = "b",
                            PhoneNumber = "f",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = new Guid("85f9967b-1011-40c0-a32e-87370b013966"),
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(2002, 11, 25, 17, 47, 55, 494, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "76b1da8d-1986-4020-840f-bbba1a97a295",
                            Email = "AshkanTeacher@gmail.com",
                            EmailConfirmed = false,
                            Firstname = "Admin",
                            IsActived = false,
                            IsDeleted = false,
                            IsStudent = false,
                            IsSystemAccount = true,
                            IsSystemAdmin = true,
                            IsTeacher = false,
                            LastName = "Admini",
                            LockoutEnabled = false,
                            NationalCode = "1234567890",
                            PhoneNumber = "09123655654",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("MAhface.Domain.Core.Entities.BasicInfo.Business.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderNo")
                        .HasColumnType("int");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category", "BasicInfo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4a6ef880-e352-49dc-0976-08dd0d886873"),
                            Code = 0,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(8791),
                            CreatedUserID = new Guid("85f9967b-1011-40c0-a32e-87370b013966"),
                            Description = "string",
                            ISActive = true,
                            IsDeleted = false,
                            OrderNo = 0,
                            Title = "تستی"
                        },
                        new
                        {
                            Id = new Guid("13dc2597-a7a3-482e-b54a-23e83d2ab18b"),
                            Code = 0,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(8810),
                            CreatedUserID = new Guid("85f9967b-1011-40c0-a32e-87370b013966"),
                            Description = "",
                            ISActive = true,
                            IsDeleted = false,
                            OrderNo = 7,
                            Title = "دانشگاهی علوم پایه پزشکی"
                        },
                        new
                        {
                            Id = new Guid("a654d03d-4e58-47fb-b70c-5e9433677052"),
                            Code = 0,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(8814),
                            CreatedUserID = new Guid("85f9967b-1011-40c0-a32e-87370b013966"),
                            Description = "",
                            ISActive = true,
                            IsDeleted = false,
                            OrderNo = 3,
                            Title = "زبان های خارجی"
                        },
                        new
                        {
                            Id = new Guid("463044b4-343f-4101-b2a3-73012d059ac9"),
                            Code = 0,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(8819),
                            CreatedUserID = new Guid("85f9967b-1011-40c0-a32e-87370b013966"),
                            Description = "",
                            ISActive = true,
                            IsDeleted = false,
                            OrderNo = 9,
                            Title = "هنر"
                        },
                        new
                        {
                            Id = new Guid("c758ad65-5f5d-43cf-b676-8dac2d2cf948"),
                            Code = 0,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(8822),
                            CreatedUserID = new Guid("85f9967b-1011-40c0-a32e-87370b013966"),
                            Description = "",
                            ISActive = true,
                            IsDeleted = false,
                            OrderNo = 1,
                            Title = "برنامه نویسی"
                        },
                        new
                        {
                            Id = new Guid("35f3bf57-7f05-41a7-8ecb-9b48bcd52fa7"),
                            Code = 0,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(8829),
                            CreatedUserID = new Guid("85f9967b-1011-40c0-a32e-87370b013966"),
                            Description = "",
                            ISActive = true,
                            IsDeleted = false,
                            OrderNo = 6,
                            Title = "دانشگاهی فنی و مهندسی"
                        },
                        new
                        {
                            Id = new Guid("3cfad89a-7c7b-497e-acd6-9bfc97d48a9b"),
                            Code = 0,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(8832),
                            CreatedUserID = new Guid("85f9967b-1011-40c0-a32e-87370b013966"),
                            Description = "",
                            ISActive = true,
                            IsDeleted = false,
                            OrderNo = 2,
                            Title = "آی تی  و نرم افزار"
                        },
                        new
                        {
                            Id = new Guid("7dbb7444-f7a7-46d7-aa82-d35f70b2165d"),
                            Code = 0,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(8836),
                            CreatedUserID = new Guid("85f9967b-1011-40c0-a32e-87370b013966"),
                            Description = "",
                            ISActive = true,
                            IsDeleted = false,
                            OrderNo = 5,
                            Title = "مالی و سرمایه گذاری"
                        },
                        new
                        {
                            Id = new Guid("75f6493f-813e-4d97-a0ea-e4203b90f436"),
                            Code = 0,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(8839),
                            CreatedUserID = new Guid("85f9967b-1011-40c0-a32e-87370b013966"),
                            Description = "",
                            ISActive = true,
                            IsDeleted = false,
                            OrderNo = 8,
                            Title = "علوم پایه"
                        },
                        new
                        {
                            Id = new Guid("a2a57c78-7043-42e3-a156-ea5ad99fc083"),
                            Code = 0,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(8844),
                            CreatedUserID = new Guid("85f9967b-1011-40c0-a32e-87370b013966"),
                            Description = "",
                            ISActive = true,
                            IsDeleted = false,
                            OrderNo = 4,
                            Title = "مدیریت و کسب وکار"
                        });
                });

            modelBuilder.Entity("MAhface.Domain.Core.Entities.BasicInfo.Business.View", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<TimeOnly>("LastVideoTime")
                        .HasColumnType("time");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Views", "Study");
                });

            modelBuilder.Entity("MAhface.Domain.Core.Entities.Study.Course.Courses", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CourseLevelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("StarsNumber")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ImageId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Course", "Study");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5f2b414d-63ec-4d3b-bfd3-08dd37aa0f43"),
                            CategoryId = new Guid("c758ad65-5f5d-43cf-b676-8dac2d2cf948"),
                            Code = 101,
                            Cost = 1200000m,
                            CourseDescription = "دوره جامع و پروژه محور سی‌شارپ مناسب برای مبتدی تا پیشرفته.",
                            CourseLevelId = 1,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(9401),
                            CreatedUserID = new Guid("bd53a164-26df-45ab-bf5c-08dd0d797a44"),
                            ISActive = true,
                            IsDeleted = false,
                            StarsNumber = 5,
                            TeacherId = new Guid("1f262031-5db7-47ae-893d-08dd0d86a8be"),
                            Title = "آموزش برنامه‌نویسی سی‌شارپ"
                        },
                        new
                        {
                            Id = new Guid("af8d7e39-0f8f-42b9-b1c3-08dd37aa0f44"),
                            CategoryId = new Guid("7dbb7444-f7a7-46d7-aa82-d35f70b2165d"),
                            Code = 102,
                            Cost = 1500000m,
                            CourseDescription = "آشنایی با اصول مدیریت مالی و تکنیک‌های سرمایه‌گذاری در بازار.",
                            CourseLevelId = 2,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(9411),
                            CreatedUserID = new Guid("9ceea18b-7117-4059-805c-08dd0d8a09bd"),
                            ISActive = true,
                            IsDeleted = false,
                            StarsNumber = 4,
                            TeacherId = new Guid("2603e63f-9b46-4807-72be-08dd0d8f6f8f"),
                            Title = "مدیریت مالی و سرمایه‌گذاری"
                        },
                        new
                        {
                            Id = new Guid("71b3bede-4e8e-4207-a7d4-08dd37aa0f45"),
                            CategoryId = new Guid("a654d03d-4e58-47fb-b70c-5e9433677052"),
                            Code = 103,
                            Cost = 800000m,
                            CourseDescription = "دوره ویژه یادگیری زبان انگلیسی از سطح پایه با استفاده از روش‌های کاربردی.",
                            CourseLevelId = 1,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(9417),
                            CreatedUserID = new Guid("05c5b88d-af8c-407e-d068-08dd15005342"),
                            ISActive = true,
                            IsDeleted = false,
                            StarsNumber = 5,
                            TeacherId = new Guid("55a3337f-cfa5-4440-242a-08dd2592d1dd"),
                            Title = "آموزش زبان  برای مبتدیان"
                        },
                        new
                        {
                            Id = new Guid("b3e0b271-f8e0-4b3a-a7e5-08dd37aa0f46"),
                            CategoryId = new Guid("463044b4-343f-4101-b2a3-73012d059ac9"),
                            Code = 104,
                            Cost = 900000m,
                            CourseDescription = "آشنایی با اصول طراحی و نقاشی برای هنرجویان مبتدی.",
                            CourseLevelId = 1,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(9423),
                            CreatedUserID = new Guid("05c5b88d-af8c-407e-d068-08dd15005342"),
                            ISActive = true,
                            IsDeleted = false,
                            StarsNumber = 4,
                            TeacherId = new Guid("486c341e-03d9-4616-242e-08dd2592d1dd"),
                            Title = "مبانی هنر و طراحی"
                        },
                        new
                        {
                            Id = new Guid("c1e3b450-628f-4a43-b7e3-08dd37aa0f47"),
                            CategoryId = new Guid("3cfad89a-7c7b-497e-acd6-9bfc97d48a9b"),
                            Code = 105,
                            Cost = 2000000m,
                            CourseDescription = "دوره تخصصی برای یادگیری اصول هوش مصنوعی و پیاده‌سازی الگوریتم‌های یادگیری ماشین.",
                            CourseLevelId = 3,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(9428),
                            CreatedUserID = new Guid("bd53a164-26df-45ab-bf5c-08dd0d797a44"),
                            ISActive = true,
                            IsDeleted = false,
                            StarsNumber = 5,
                            TeacherId = new Guid("1f262031-5db7-47ae-893d-08dd0d86a8be"),
                            Title = "هوش مصنوعی و یادگیری ماشین"
                        },
                        new
                        {
                            Id = new Guid("9d7f57a8-26d1-4b9f-a255-08dd37ab6f01"),
                            CategoryId = new Guid("c758ad65-5f5d-43cf-b676-8dac2d2cf948"),
                            Code = 201,
                            Cost = 500000m,
                            CourseDescription = "دوره‌ای مناسب برای آشنایی با اصول اولیه ریاضیات پایه و کاربردهای آن.",
                            CourseLevelId = 1,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(9435),
                            CreatedUserID = new Guid("bd53a164-26df-45ab-bf5c-08dd0d797a44"),
                            ISActive = true,
                            IsDeleted = false,
                            StarsNumber = 4,
                            TeacherId = new Guid("1f262031-5db7-47ae-893d-08dd0d86a8be"),
                            Title = "مبانی ریاضیات پایه"
                        },
                        new
                        {
                            Id = new Guid("42d99c9a-7d35-4a45-a256-08dd37ab6f02"),
                            CategoryId = new Guid("a654d03d-4e58-47fb-b70c-5e9433677052"),
                            Code = 202,
                            Cost = 800000m,
                            CourseDescription = "آشنایی با مفاهیم پایه‌ای فیزیک و حل مسائل کاربردی.",
                            CourseLevelId = 1,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(9443),
                            CreatedUserID = new Guid("9ceea18b-7117-4059-805c-08dd0d8a09bd"),
                            ISActive = true,
                            IsDeleted = false,
                            StarsNumber = 5,
                            TeacherId = new Guid("2603e63f-9b46-4807-72be-08dd0d8f6f8f"),
                            Title = "فیزیک عمومی 1"
                        },
                        new
                        {
                            Id = new Guid("7f6f6aab-c44f-4d30-a257-08dd37ab6f03"),
                            CategoryId = new Guid("3cfad89a-7c7b-497e-acd6-9bfc97d48a9b"),
                            Code = 203,
                            Cost = 1000000m,
                            CourseDescription = "یادگیری مفاهیم آمار و احتمالات برای حل مسائل مهندسی.",
                            CourseLevelId = 2,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(9448),
                            CreatedUserID = new Guid("05c5b88d-af8c-407e-d068-08dd15005342"),
                            ISActive = true,
                            IsDeleted = false,
                            StarsNumber = 5,
                            TeacherId = new Guid("55a3337f-cfa5-4440-242a-08dd2592d1dd"),
                            Title = "آمار و احتمالات مهندسی"
                        },
                        new
                        {
                            Id = new Guid("b8c1131e-c817-44ea-a258-08dd37ab6f04"),
                            CategoryId = new Guid("7dbb7444-f7a7-46d7-aa82-d35f70b2165d"),
                            Code = 204,
                            Cost = 1500000m,
                            CourseDescription = "آشنایی با اصول بازاریابی در دنیای دیجیتال و راه‌های جذب مشتری.",
                            CourseLevelId = 1,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(9454),
                            CreatedUserID = new Guid("bd53a164-26df-45ab-bf5c-08dd0d797a44"),
                            ISActive = true,
                            IsDeleted = false,
                            StarsNumber = 5,
                            TeacherId = new Guid("1f262031-5db7-47ae-893d-08dd0d86a8be"),
                            Title = "اصول بازاریابی دیجیتال"
                        },
                        new
                        {
                            Id = new Guid("d52d29fb-80da-40b0-a259-08dd37ab6f05"),
                            CategoryId = new Guid("463044b4-343f-4101-b2a3-73012d059ac9"),
                            Code = 205,
                            Cost = 1200000m,
                            CourseDescription = "دوره‌ای جامع برای یادگیری طراحی صفحات وب با HTML و CSS.",
                            CourseLevelId = 1,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(9475),
                            CreatedUserID = new Guid("05c5b88d-af8c-407e-d068-08dd15005342"),
                            ISActive = true,
                            IsDeleted = false,
                            StarsNumber = 4,
                            TeacherId = new Guid("486c341e-03d9-4616-242e-08dd2592d1dd"),
                            Title = "طراحی وب با HTML و CSS"
                        },
                        new
                        {
                            Id = new Guid("12f272c9-f198-45c4-a260-08dd37ab6f06"),
                            CategoryId = new Guid("c758ad65-5f5d-43cf-b676-8dac2d2cf948"),
                            Code = 206,
                            Cost = 2000000m,
                            CourseDescription = "آموزش پیشرفته پایتون برای تحلیل داده، هوش مصنوعی و طراحی سیستم.",
                            CourseLevelId = 2,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(9485),
                            CreatedUserID = new Guid("bd53a164-26df-45ab-bf5c-08dd0d797a44"),
                            ISActive = true,
                            IsDeleted = false,
                            StarsNumber = 5,
                            TeacherId = new Guid("1f262031-5db7-47ae-893d-08dd0d86a8be"),
                            Title = "برنامه‌نویسی پیشرفته با پایتون"
                        },
                        new
                        {
                            Id = new Guid("89e4b1db-9b95-4fa8-a261-08dd37ab6f07"),
                            CategoryId = new Guid("463044b4-343f-4101-b2a3-73012d059ac9"),
                            Code = 207,
                            Cost = 1800000m,
                            CourseDescription = "آشنایی با ابزارها و تکنیک‌های طراحی سه‌بعدی در نرم‌افزار Blender.",
                            CourseLevelId = 2,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(9491),
                            CreatedUserID = new Guid("05c5b88d-af8c-407e-d068-08dd15005342"),
                            ISActive = true,
                            IsDeleted = false,
                            StarsNumber = 4,
                            TeacherId = new Guid("486c341e-03d9-4616-242e-08dd2592d1dd"),
                            Title = "طراحی و مدل‌سازی  با Blender"
                        },
                        new
                        {
                            Id = new Guid("c7f3d234-9fc3-453a-b500-08dd37ab7f01"),
                            CategoryId = new Guid("c758ad65-5f5d-43cf-b676-8dac2d2cf948"),
                            Code = 208,
                            Cost = 900000m,
                            CourseDescription = "آموزش مفاهیم اولیه برنامه‌نویسی با زبان جاوا برای مبتدیان.",
                            CourseLevelId = 1,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(9501),
                            CreatedUserID = new Guid("9ceea18b-7117-4059-805c-08dd0d8a09bd"),
                            ISActive = true,
                            IsDeleted = false,
                            StarsNumber = 4,
                            TeacherId = new Guid("2603e63f-9b46-4807-72be-08dd0d8f6f8f"),
                            Title = "آموزش مقدماتی زبان جاوا"
                        },
                        new
                        {
                            Id = new Guid("f9ad1d79-7325-497e-b501-08dd37ab7f02"),
                            CategoryId = new Guid("463044b4-343f-4101-b2a3-73012d059ac9"),
                            Code = 209,
                            Cost = 1100000m,
                            CourseDescription = "آشنایی با اصول پایه شبکه‌های کامپیوتری و پروتکل‌های ارتباطی.",
                            CourseLevelId = 1,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(9507),
                            CreatedUserID = new Guid("05c5b88d-af8c-407e-d068-08dd15005342"),
                            ISActive = true,
                            IsDeleted = false,
                            StarsNumber = 5,
                            TeacherId = new Guid("486c341e-03d9-4616-242e-08dd2592d1dd"),
                            Title = "اصول شبکه‌های کامپیوتری"
                        },
                        new
                        {
                            Id = new Guid("a12c08e7-8827-4912-b502-08dd37ab7f03"),
                            CategoryId = new Guid("3cfad89a-7c7b-497e-acd6-9bfc97d48a9b"),
                            Code = 210,
                            Cost = 1500000m,
                            CourseDescription = "آموزش تحلیل داده‌های سازمانی با استفاده از زبان SQL.",
                            CourseLevelId = 2,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(9513),
                            CreatedUserID = new Guid("bd53a164-26df-45ab-bf5c-08dd0d797a44"),
                            ISActive = true,
                            IsDeleted = false,
                            StarsNumber = 5,
                            TeacherId = new Guid("1f262031-5db7-47ae-893d-08dd0d86a8be"),
                            Title = "تحلیل داده با SQL"
                        },
                        new
                        {
                            Id = new Guid("d75d8d12-fdf9-45c8-b503-08dd37ab7f04"),
                            CategoryId = new Guid("7dbb7444-f7a7-46d7-aa82-d35f70b2165d"),
                            Code = 211,
                            Cost = 2500000m,
                            CourseDescription = "آموزش مفاهیم پایه‌ای یادگیری ماشین و الگوریتم‌های آن.",
                            CourseLevelId = 1,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(9518),
                            CreatedUserID = new Guid("9ceea18b-7117-4059-805c-08dd0d8a09bd"),
                            ISActive = true,
                            IsDeleted = false,
                            StarsNumber = 5,
                            TeacherId = new Guid("2603e63f-9b46-4807-72be-08dd0d8f6f8f"),
                            Title = "یادگیری ماشین برای مبتدیان"
                        },
                        new
                        {
                            Id = new Guid("bf3ea476-bc8f-4572-b504-08dd37ab7f05"),
                            CategoryId = new Guid("a654d03d-4e58-47fb-b70c-5e9433677052"),
                            Code = 212,
                            Cost = 800000m,
                            CourseDescription = "یادگیری اصول پایه‌ای مدارهای الکترونیکی و کاربردهای آن‌ها.",
                            CourseLevelId = 1,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(9524),
                            CreatedUserID = new Guid("05c5b88d-af8c-407e-d068-08dd15005342"),
                            ISActive = true,
                            IsDeleted = false,
                            StarsNumber = 4,
                            TeacherId = new Guid("55a3337f-cfa5-4440-242a-08dd2592d1dd"),
                            Title = "مبانی برق و الکترونیک"
                        },
                        new
                        {
                            Id = new Guid("f3e321eb-94d8-4b8d-b505-08dd37ab7f06"),
                            CategoryId = new Guid("c758ad65-5f5d-43cf-b676-8dac2d2cf948"),
                            Code = 213,
                            Cost = 2200000m,
                            CourseDescription = "آموزش ساخت اپلیکیشن‌های موبایل برای اندروید و iOS با Flutter.",
                            CourseLevelId = 2,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(9531),
                            CreatedUserID = new Guid("05c5b88d-af8c-407e-d068-08dd15005342"),
                            ISActive = true,
                            IsDeleted = false,
                            StarsNumber = 5,
                            TeacherId = new Guid("486c341e-03d9-4616-242e-08dd2592d1dd"),
                            Title = "توسعه اپلیکیشن‌های موبایل با Flutter"
                        },
                        new
                        {
                            Id = new Guid("6d9c7e02-56c7-4a77-b506-08dd37ab7f07"),
                            CategoryId = new Guid("7dbb7444-f7a7-46d7-aa82-d35f70b2165d"),
                            Code = 214,
                            Cost = 1700000m,
                            CourseDescription = "آشنایی با تکنیک‌ها و ابزارهای مدیریت پروژه‌های نرم‌افزاری.",
                            CourseLevelId = 2,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(9537),
                            CreatedUserID = new Guid("bd53a164-26df-45ab-bf5c-08dd0d797a44"),
                            ISActive = true,
                            IsDeleted = false,
                            StarsNumber = 5,
                            TeacherId = new Guid("1f262031-5db7-47ae-893d-08dd0d86a8be"),
                            Title = "مدیریت پروژه‌های نرم‌افزاری"
                        },
                        new
                        {
                            Id = new Guid("ef123b19-3b99-4c24-b507-08dd37ab7f08"),
                            CategoryId = new Guid("463044b4-343f-4101-b2a3-73012d059ac9"),
                            Code = 215,
                            Cost = 1200000m,
                            CourseDescription = "آموزش طراحی رابط کاربری زیبا و کاربردی با ابزارهای مدرن.",
                            CourseLevelId = 1,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(9542),
                            CreatedUserID = new Guid("9ceea18b-7117-4059-805c-08dd0d8a09bd"),
                            ISActive = true,
                            IsDeleted = false,
                            StarsNumber = 4,
                            TeacherId = new Guid("2603e63f-9b46-4807-72be-08dd0d8f6f8f"),
                            Title = "طراحی رابط کاربری (UI)"
                        },
                        new
                        {
                            Id = new Guid("39a2b245-8188-4b47-b508-08dd37ab7f09"),
                            CategoryId = new Guid("c758ad65-5f5d-43cf-b676-8dac2d2cf948"),
                            Code = 216,
                            Cost = 2500000m,
                            CourseDescription = "آموزش ساخت برنامه‌های تحت وب بااستفاده از ASP.NETCore.",
                            CourseLevelId = 2,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(9549),
                            CreatedUserID = new Guid("05c5b88d-af8c-407e-d068-08dd15005342"),
                            ISActive = true,
                            IsDeleted = false,
                            StarsNumber = 5,
                            TeacherId = new Guid("486c341e-03d9-4616-242e-08dd2592d1dd"),
                            Title = "توسعه وب ASP.NET Core"
                        },
                        new
                        {
                            Id = new Guid("876a3131-1dc9-4a21-b509-08dd37ab7f10"),
                            CategoryId = new Guid("7dbb7444-f7a7-46d7-aa82-d35f70b2165d"),
                            Code = 217,
                            Cost = 1800000m,
                            CourseDescription = "یادگیری اصول و تکنیک‌های پایه‌ای هوش مصنوعی.",
                            CourseLevelId = 1,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(9555),
                            CreatedUserID = new Guid("bd53a164-26df-45ab-bf5c-08dd0d797a44"),
                            ISActive = true,
                            IsDeleted = false,
                            StarsNumber = 4,
                            TeacherId = new Guid("1f262031-5db7-47ae-893d-08dd0d86a8be"),
                            Title = "آموزش مقدماتی هوش مصنوعی"
                        },
                        new
                        {
                            Id = new Guid("ab3e4a26-9e2f-46fa-b510-08dd37ab7f11"),
                            CategoryId = new Guid("c758ad65-5f5d-43cf-b676-8dac2d2cf948"),
                            Code = 218,
                            Cost = 2000000m,
                            CourseDescription = "آموزش مفاهیم شیءگرایی و پیاده‌سازی آن با زبان C#.",
                            CourseLevelId = 2,
                            CreatedDate = new DateTime(2025, 1, 17, 23, 38, 38, 24, DateTimeKind.Local).AddTicks(9561),
                            CreatedUserID = new Guid("05c5b88d-af8c-407e-d068-08dd15005342"),
                            ISActive = true,
                            IsDeleted = false,
                            StarsNumber = 5,
                            TeacherId = new Guid("486c341e-03d9-4616-242e-08dd2592d1dd"),
                            Title = "برنامه‌نویسی شیءگرا با C#"
                        });
                });

            modelBuilder.Entity("MAhface.Domain.Core.Entities.Study.Season.Seasons", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SeasonsDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Season", "Study");
                });

            modelBuilder.Entity("MAhface.Domain.Core1.Entities.BasicInfo.Accounting.EmailLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ErrorDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SentByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SentByUserId");

                    b.ToTable("EmailLogs");
                });

            modelBuilder.Entity("MAhface.Domain.Core1.Entities.BasicInfo.Accounting.EmailSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SMTPHost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SMTPPort")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EmailSetting");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d4819e1b-3dab-4d13-9ee5-dfb6c2aee0ff"),
                            EmailAddress = "Register@mahface-allameh.ir",
                            Password = "MahfaceAllamEh",
                            SMTPHost = "mail.mahface-allameh.ir",
                            SMTPPort = 587
                        });
                });

            modelBuilder.Entity("MAhface.Domain.Core1.Entities.BasicInfo.Accounting.Otp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailOrPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpireTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("OtpCode")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Otps");
                });

            modelBuilder.Entity("MAhface.Domain.Core1.Entities.BasicInfo.Accounting.TeacherRequests", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdminDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AdminResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int");

                    b.Property<string>("UserDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UserRequestDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TeacherRequests");
                });

            modelBuilder.Entity("MAhface.Domain.Core1.Entities.BasicInfo.Business.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Base64File")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Code"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ISActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Image", "BasicInfo");
                });

            modelBuilder.Entity("MAhface.Domain.Core1.Entities.ErrorLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entityname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Exeption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ErrorLog", "System");
                });

            modelBuilder.Entity("MAhface.Domain.Core1.Entities.Study.Episode.Episode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CoursesStudent", b =>
                {
                    b.HasOne("MAhface.Domain.Core.Entities.Study.Course.Courses", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MAhface.Domain.Core.Entities.BasicInfo.Accounting.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MAhface.Domain.Core.Entities.BasicInfo.Accounting.Student", b =>
                {
                    b.HasOne("MAhface.Domain.Core.Entities.BasicInfo.Accounting.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MAhface.Domain.Core.Entities.BasicInfo.Accounting.Teacher", b =>
                {
                    b.HasOne("MAhface.Domain.Core.Entities.BasicInfo.Accounting.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MAhface.Domain.Core.Entities.BasicInfo.Accounting.User", b =>
                {
                    b.HasOne("MAhface.Domain.Core1.Entities.BasicInfo.Business.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("MAhface.Domain.Core.Entities.BasicInfo.Business.View", b =>
                {
                    b.HasOne("MAhface.Domain.Core.Entities.BasicInfo.Accounting.User", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("MAhface.Domain.Core.Entities.Study.Course.Courses", b =>
                {
                    b.HasOne("MAhface.Domain.Core.Entities.BasicInfo.Business.Category", "category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MAhface.Domain.Core1.Entities.BasicInfo.Business.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("MAhface.Domain.Core.Entities.BasicInfo.Accounting.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");

                    b.Navigation("Image");

                    b.Navigation("Teacher");

                    b.Navigation("category");
                });

            modelBuilder.Entity("MAhface.Domain.Core.Entities.Study.Season.Seasons", b =>
                {
                    b.HasOne("MAhface.Domain.Core.Entities.Study.Course.Courses", "Course")
                        .WithMany("Seasons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("MAhface.Domain.Core1.Entities.BasicInfo.Accounting.EmailLog", b =>
                {
                    b.HasOne("MAhface.Domain.Core.Entities.BasicInfo.Accounting.User", "SentByUser")
                        .WithMany()
                        .HasForeignKey("SentByUserId");

                    b.Navigation("SentByUser");
                });

            modelBuilder.Entity("MAhface.Domain.Core1.Entities.BasicInfo.Accounting.TeacherRequests", b =>
                {
                    b.HasOne("MAhface.Domain.Core.Entities.BasicInfo.Accounting.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MAhface.Domain.Core1.Entities.Study.Episode.Episode", b =>
                {
                    b.HasOne("MAhface.Domain.Core.Entities.Study.Season.Seasons", "Season")
                        .WithMany("Episodes")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("MAhface.Domain.Core.Entities.BasicInfo.Accounting.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("MAhface.Domain.Core.Entities.BasicInfo.Accounting.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MAhface.Domain.Core.Entities.BasicInfo.Accounting.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("MAhface.Domain.Core.Entities.BasicInfo.Accounting.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MAhface.Domain.Core.Entities.BasicInfo.Business.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("MAhface.Domain.Core.Entities.Study.Course.Courses", b =>
                {
                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("MAhface.Domain.Core.Entities.Study.Season.Seasons", b =>
                {
                    b.Navigation("Episodes");
                });
#pragma warning restore 612, 618
        }
    }
}
